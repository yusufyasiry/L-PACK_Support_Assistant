import argparse
import os
import glob
import sys
from pathlib import Path

# Add the project root to Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from ingestion.loaders import pdf_loader, csv_loader, docx_loader, html_loader

# File extension to loader mapping
LOADER_MAP = {
    ".pdf": pdf_loader.PDFLoader,
    ".csv": csv_loader.CSVLoader,
    ".docx": docx_loader.DocxLoader,
    ".html": html_loader.HTMLLoader,
    ".htm": html_loader.HTMLLoader
}

def get_file_loader(file_path):
    """Determine which loader to use based on file extension"""
    file_ext = Path(file_path).suffix.lower()
    return LOADER_MAP.get(file_ext)

def load_all_files_in_raw():
    """Load all supported files in the data/raw directory"""
    raw_dir = "data/raw"
    
    if not os.path.exists(raw_dir):
        print(f"Error: Directory {raw_dir} does not exist!")
        return
    
    print("=== File Loader Demo ===\n")
    print(f"Scanning directory: {raw_dir}")
    
    # Get all files in the raw directory
    all_files = glob.glob(os.path.join(raw_dir, "*"))
    supported_files = []
    
    for file_path in all_files:
        if os.path.isfile(file_path):
            loader_class = get_file_loader(file_path)
            if loader_class:
                supported_files.append((file_path, loader_class))
            else:
                print(f"‚ö†Ô∏è  Skipping unsupported file: {os.path.basename(file_path)}")
    
    if not supported_files:
        print("No supported files found in data/raw directory!")
        return
    
    print(f"\nFound {len(supported_files)} supported files:")
    for file_path, loader_class in supported_files:
        print(f"  - {os.path.basename(file_path)} -> {loader_class.__name__}")
    
    print("\n" + "="*50)
    
    # Process each file
    for file_path, loader_class in supported_files:
        print(f"\nüìÑ Processing: {os.path.basename(file_path)}")
        print(f"   Loader: {loader_class.__name__}")
        
        try:
            # Special handling for CSV files (need text_cols parameter)
            if loader_class == csv_loader.CSVLoader:
                # For demo purposes, assume common CSV structure
                loader = loader_class(file_path, text_cols=["title", "description", "category"], id_col="id")
            else:
                loader = loader_class(file_path)
            
            # Load documents
            documents = loader.load()
            
            print(f"   ‚úÖ Successfully loaded {len(documents)} document(s)")
            
            # Show first few documents as preview
            for i, doc in enumerate(documents[:3], 1):  # Show first 3 docs
                print(f"   Document {i}:")
                print(f"     Content preview: {doc.page_content[:100]}...")
                print(f"     Metadata: {doc.metadata}")
                print()
            
            if len(documents) > 3:
                print(f"   ... and {len(documents) - 3} more documents")
                
        except Exception as e:
            print(f"   ‚ùå Error loading file: {str(e)}")
        
        print("-" * 40)

if __name__ == "__main__":
    load_all_files_in_raw()
